import java.util.*;

class ping {
  public static Scanner rfid = new Scanner(System.in);
  public static int idList[] = new int[3];
  public static int lnD0Pn[] = new int[3];
  public static int angD1D0Pn[] = new int[3];
  public static int lnD1Pn[] = new int[3];
  public static int angGDPn[] = new int[3];
  public static int angPnDR[] = new int[3];
  public static int angPnR[] = new int[3];
  private static int n;
  private static double lnDD, lnE, lnDR;
  
  public static void main(String[] args){
    id(idList);
    System.out.println(Arrays.toString(idList));
    var(idList);
    System.out.println(Arrays.toString(lnD0Pn));
    System.out.println(Arrays.toString(angD1D0Pn));
    System.out.println(Arrays.toString(angPnDR));
    System.out.println(lnDD);
    System.out.println(lnE);
    System.out.println(lnDR);
    locCalc(idList);
    System.out.pringln(Arrays.toString(lnPnR));
  }
  
  public static void id(int[] x){
    System.out.println("Enter up to 5 user ID's here: ");
    for(int i = 0; i < x.length; i++){
      n = rfid.nextInt();
      x[i] = n;
    
    }
  }
  
  public static void var(int[] x){
    for(int i = 0; i < x.length; i++){
      System.out.println("Enter the numbers for the following information for person " + x[i] + ": ");
      System.out.println("Distance from person to drone start posistion: ");
      lnD0Pn[i] = rfid.nextInt();
      System.out.println("Angle of the drone's starting position: ");
      angD1D0Pn[i] = rfid.nextInt();
      System.out.println("Angle of drone's final position: ");
      angPnDR[i] = rfid.nextInt();
    }
    System.out.println("Distane drone traveled: ");
    lnDD = rfid.nextDouble();
    System.out.println("Drone elevation: ");
    lnE = rfid.nextDouble();
    System.out.println("Distane from drone to target: ");
    lnDR = rfid.nextDouble();
  }
  
  public static void locCalc(int[] x){
  for(int i = 0; i < x.length; i++){
  lnD1Pn[i] = Math.sqrt(Math.pow(lnD0pn[i], 2) + Math.pow(lnDD, 2) - (2 * lnD0Pn[i] * DD * Math.cos(angD1D0Pn[i])));
  angGDR[i] = Math.acos((lnE / lnDR));
  angGDPn[i] = Math.acos((lnE / lnD1Pn[i]);
  lnPnR[i] = Math.sqrt(Math.pow(lnD1Pn[i], 2) + Math.pow(lnDR, 2) - (2 * lnD1Pn[i] * DR * Math.cos(angPnDR[i])));
    }
  }
}
